// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product_service";

export interface Empty {
}

export interface CreateProductRequest {
  productName: string;
  price: number;
  description?: string | undefined;
}

export interface Product {
  id: string;
  productName: string;
  price: number;
  description?: string | undefined;
}

export interface ProductList {
  products: Product[];
}

export const PRODUCT_SERVICE_PACKAGE_NAME = "product_service";

export interface ProductServiceClient {
  getAllProducts(request: Empty): Observable<ProductList>;

  createProduct(request: CreateProductRequest): Observable<Product>;
}

export interface ProductServiceController {
  getAllProducts(request: Empty): Promise<ProductList> | Observable<ProductList> | ProductList;

  createProduct(request: CreateProductRequest): Promise<Product> | Observable<Product> | Product;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllProducts", "createProduct"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
